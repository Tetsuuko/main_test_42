
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
{
	"class_cpp": {
	  "prefix": ["classc", "classcpp"],
	  "body": [
		"#include \"${TM_FILENAME_BASE}.hpp\"",
		"",
		"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(void)\n{\n\treturn ;\n}\n",
		"${TM_FILENAME_BASE}::~${TM_FILENAME_BASE}(void)\n{\n\treturn ;\n}\n",
		"${TM_FILENAME_BASE}::${TM_FILENAME_BASE}(const ${TM_FILENAME_BASE} &other${TM_FILENAME_BASE})\n{\n\tif (this != &other${TM_FILENAME_BASE})\n\t{\n\t\t*this = copy;\n\t}\n\treturn;\n}\n",
		"${TM_FILENAME_BASE} &${TM_FILENAME_BASE}::operator=(const ${TM_FILENAME_BASE} &other${TM_FILENAME_BASE})\n{\n\tif (this != &other${TM_FILENAME_BASE})\n\t{\n\t}\t\t\n\treturn(*this);\n}"
	  ],
	  "description": "starter cpp class 42"
	},
	"class_hpp": {
	  "prefix": ["classh", "class_hpp"],
	  "body": [
		"#ifndef ${TM_FILENAME/([^\\.]*)(\\.)*/${1:/upcase}${2:+_}/g}",
		"# define ${TM_FILENAME/([^\\.]*)(\\.)*/${1:/upcase}${2:+_}/g}",
		"",
		"class ${TM_FILENAME_BASE} \n{",
		"\tpublic:",
		"\t\t\t\t${TM_FILENAME_BASE}(void);",
		"\t\t\t\t~${TM_FILENAME_BASE}(void);",
		"\t\t\t\t${TM_FILENAME_BASE}(${TM_FILENAME_BASE} const & copy);",
		"\t\t${TM_FILENAME_BASE}\t&operator=(${TM_FILENAME_BASE} const & rhs);",
		"",
		"\tprotected:",
		"",
		"\tprivate:",
		"",
		"};",
		"",
		"#endif\n"
	  ],
	  "description": "class.hpp"
	}
  }
  